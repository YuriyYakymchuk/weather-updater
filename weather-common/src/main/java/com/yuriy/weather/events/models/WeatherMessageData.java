/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yuriy.weather.events.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WeatherMessageData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3932406591394661766L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WeatherMessageData\",\"namespace\":\"com.yuriy.weather.events.models\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"temperature\",\"type\":\"double\"},{\"name\":\"humidity\",\"type\":\"int\"},{\"name\":\"windSpeed\",\"type\":\"int\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"cloudy\",\"type\":[\"null\",\"string\"],\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WeatherMessageData> ENCODER =
      new BinaryMessageEncoder<WeatherMessageData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WeatherMessageData> DECODER =
      new BinaryMessageDecoder<WeatherMessageData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<WeatherMessageData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<WeatherMessageData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<WeatherMessageData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this WeatherMessageData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a WeatherMessageData from a ByteBuffer. */
  public static WeatherMessageData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212 */
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public double temperature;
  @Deprecated public int humidity;
  @Deprecated public int windSpeed;
  @Deprecated public long time;
  @Deprecated public java.lang.CharSequence cloudy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WeatherMessageData() {}

  /**
   * All-args constructor.
   * @param id Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212
   * @param country The new value for country
   * @param city The new value for city
   * @param temperature The new value for temperature
   * @param humidity The new value for humidity
   * @param windSpeed The new value for windSpeed
   * @param time The new value for time
   * @param cloudy The new value for cloudy
   */
  public WeatherMessageData(java.lang.CharSequence id, java.lang.CharSequence country, java.lang.CharSequence city, java.lang.Double temperature, java.lang.Integer humidity, java.lang.Integer windSpeed, java.lang.Long time, java.lang.CharSequence cloudy) {
    this.id = id;
    this.country = country;
    this.city = city;
    this.temperature = temperature;
    this.humidity = humidity;
    this.windSpeed = windSpeed;
    this.time = time;
    this.cloudy = cloudy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return country;
    case 2: return city;
    case 3: return temperature;
    case 4: return humidity;
    case 5: return windSpeed;
    case 6: return time;
    case 7: return cloudy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: country = (java.lang.CharSequence)value$; break;
    case 2: city = (java.lang.CharSequence)value$; break;
    case 3: temperature = (java.lang.Double)value$; break;
    case 4: humidity = (java.lang.Integer)value$; break;
    case 5: windSpeed = (java.lang.Integer)value$; break;
    case 6: time = (java.lang.Long)value$; break;
    case 7: cloudy = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public java.lang.Double getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(java.lang.Double value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return The value of the 'humidity' field.
   */
  public java.lang.Integer getHumidity() {
    return humidity;
  }

  /**
   * Sets the value of the 'humidity' field.
   * @param value the value to set.
   */
  public void setHumidity(java.lang.Integer value) {
    this.humidity = value;
  }

  /**
   * Gets the value of the 'windSpeed' field.
   * @return The value of the 'windSpeed' field.
   */
  public java.lang.Integer getWindSpeed() {
    return windSpeed;
  }

  /**
   * Sets the value of the 'windSpeed' field.
   * @param value the value to set.
   */
  public void setWindSpeed(java.lang.Integer value) {
    this.windSpeed = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'cloudy' field.
   * @return The value of the 'cloudy' field.
   */
  public java.lang.CharSequence getCloudy() {
    return cloudy;
  }

  /**
   * Sets the value of the 'cloudy' field.
   * @param value the value to set.
   */
  public void setCloudy(java.lang.CharSequence value) {
    this.cloudy = value;
  }

  /**
   * Creates a new WeatherMessageData RecordBuilder.
   * @return A new WeatherMessageData RecordBuilder
   */
  public static com.yuriy.weather.events.models.WeatherMessageData.Builder newBuilder() {
    return new com.yuriy.weather.events.models.WeatherMessageData.Builder();
  }

  /**
   * Creates a new WeatherMessageData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WeatherMessageData RecordBuilder
   */
  public static com.yuriy.weather.events.models.WeatherMessageData.Builder newBuilder(com.yuriy.weather.events.models.WeatherMessageData.Builder other) {
    return new com.yuriy.weather.events.models.WeatherMessageData.Builder(other);
  }

  /**
   * Creates a new WeatherMessageData RecordBuilder by copying an existing WeatherMessageData instance.
   * @param other The existing instance to copy.
   * @return A new WeatherMessageData RecordBuilder
   */
  public static com.yuriy.weather.events.models.WeatherMessageData.Builder newBuilder(com.yuriy.weather.events.models.WeatherMessageData other) {
    return new com.yuriy.weather.events.models.WeatherMessageData.Builder(other);
  }

  /**
   * RecordBuilder for WeatherMessageData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WeatherMessageData>
    implements org.apache.avro.data.RecordBuilder<WeatherMessageData> {

    /** Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212 */
    private java.lang.CharSequence id;
    private java.lang.CharSequence country;
    private java.lang.CharSequence city;
    private double temperature;
    private int humidity;
    private int windSpeed;
    private long time;
    private java.lang.CharSequence cloudy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yuriy.weather.events.models.WeatherMessageData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temperature)) {
        this.temperature = data().deepCopy(fields()[3].schema(), other.temperature);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.humidity)) {
        this.humidity = data().deepCopy(fields()[4].schema(), other.humidity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.windSpeed)) {
        this.windSpeed = data().deepCopy(fields()[5].schema(), other.windSpeed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.time)) {
        this.time = data().deepCopy(fields()[6].schema(), other.time);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cloudy)) {
        this.cloudy = data().deepCopy(fields()[7].schema(), other.cloudy);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WeatherMessageData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yuriy.weather.events.models.WeatherMessageData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temperature)) {
        this.temperature = data().deepCopy(fields()[3].schema(), other.temperature);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.humidity)) {
        this.humidity = data().deepCopy(fields()[4].schema(), other.humidity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.windSpeed)) {
        this.windSpeed = data().deepCopy(fields()[5].schema(), other.windSpeed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.time)) {
        this.time = data().deepCopy(fields()[6].schema(), other.time);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cloudy)) {
        this.cloudy = data().deepCopy(fields()[7].schema(), other.cloudy);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique id which consists of country:city:time. E.g. Ukraine:Lviv:34343222121212
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.country = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearCountry() {
      country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.city = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearCity() {
      city = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public java.lang.Double getTemperature() {
      return temperature;
    }

    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setTemperature(double value) {
      validate(fields()[3], value);
      this.temperature = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearTemperature() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * @return The value.
      */
    public java.lang.Integer getHumidity() {
      return humidity;
    }

    /**
      * Sets the value of the 'humidity' field.
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setHumidity(int value) {
      validate(fields()[4], value);
      this.humidity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'humidity' field.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearHumidity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'windSpeed' field.
      * @return The value.
      */
    public java.lang.Integer getWindSpeed() {
      return windSpeed;
    }

    /**
      * Sets the value of the 'windSpeed' field.
      * @param value The value of 'windSpeed'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setWindSpeed(int value) {
      validate(fields()[5], value);
      this.windSpeed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'windSpeed' field has been set.
      * @return True if the 'windSpeed' field has been set, false otherwise.
      */
    public boolean hasWindSpeed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'windSpeed' field.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearWindSpeed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setTime(long value) {
      validate(fields()[6], value);
      this.time = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearTime() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'cloudy' field.
      * @return The value.
      */
    public java.lang.CharSequence getCloudy() {
      return cloudy;
    }

    /**
      * Sets the value of the 'cloudy' field.
      * @param value The value of 'cloudy'.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder setCloudy(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.cloudy = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'cloudy' field has been set.
      * @return True if the 'cloudy' field has been set, false otherwise.
      */
    public boolean hasCloudy() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'cloudy' field.
      * @return This builder.
      */
    public com.yuriy.weather.events.models.WeatherMessageData.Builder clearCloudy() {
      cloudy = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WeatherMessageData build() {
      try {
        WeatherMessageData record = new WeatherMessageData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.country = fieldSetFlags()[1] ? this.country : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.city = fieldSetFlags()[2] ? this.city : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.temperature = fieldSetFlags()[3] ? this.temperature : (java.lang.Double) defaultValue(fields()[3]);
        record.humidity = fieldSetFlags()[4] ? this.humidity : (java.lang.Integer) defaultValue(fields()[4]);
        record.windSpeed = fieldSetFlags()[5] ? this.windSpeed : (java.lang.Integer) defaultValue(fields()[5]);
        record.time = fieldSetFlags()[6] ? this.time : (java.lang.Long) defaultValue(fields()[6]);
        record.cloudy = fieldSetFlags()[7] ? this.cloudy : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WeatherMessageData>
    WRITER$ = (org.apache.avro.io.DatumWriter<WeatherMessageData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WeatherMessageData>
    READER$ = (org.apache.avro.io.DatumReader<WeatherMessageData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
